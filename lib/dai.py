# This file was automatically generated by SWIG (http://www.swig.org).
# Version 1.3.36
#
# Don't modify this file, modify the SWIG interface instead.
# This file is compatible with both classic and new-style classes.

import _dai
import new
new_instancemethod = new.instancemethod
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'PySwigObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static) or hasattr(self,name):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError,name

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

class Neighbor:
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Neighbor, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Neighbor, name)
    __repr__ = _swig_repr
    __swig_setmethods__["iter"] = _dai.Neighbor_iter_set
    __swig_getmethods__["iter"] = _dai.Neighbor_iter_get
    __swig_setmethods__["node"] = _dai.Neighbor_node_set
    __swig_getmethods__["node"] = _dai.Neighbor_node_get
    __swig_setmethods__["dual"] = _dai.Neighbor_dual_set
    __swig_getmethods__["dual"] = _dai.Neighbor_dual_get
    def __init__(self, *args): 
        this = apply(_dai.new_Neighbor, args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _dai.delete_Neighbor
    __del__ = lambda self : None;
Neighbor_swigregister = _dai.Neighbor_swigregister
Neighbor_swigregister(Neighbor)

log = _dai.log
log0 = _dai.log0
exp = _dai.exp
max = _dai.max
toc = _dai.toc
rnd_seed = _dai.rnd_seed
rnd_uniform = _dai.rnd_uniform
rnd_stdnormal = _dai.rnd_stdnormal
rnd_int = _dai.rnd_int
rnd = _dai.rnd
class Var:
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Var, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Var, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = apply(_dai.new_Var, args)
        try: self.this.append(this)
        except: self.this = this
    def label(*args): return apply(_dai.Var_label, args)
    def states(*args): return apply(_dai.Var_states, args)
    def __lt__(*args): return apply(_dai.Var___lt__, args)
    def __gt__(*args): return apply(_dai.Var___gt__, args)
    def __le__(*args): return apply(_dai.Var___le__, args)
    def __ge__(*args): return apply(_dai.Var___ge__, args)
    def __ne__(*args): return apply(_dai.Var___ne__, args)
    def __eq__(*args): return apply(_dai.Var___eq__, args)
    __swig_destroy__ = _dai.delete_Var
    __del__ = lambda self : None;
Var_swigregister = _dai.Var_swigregister
Var_swigregister(Var)
tokenizeString = _dai.tokenizeString

class SmallSetVar:
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SmallSetVar, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SmallSetVar, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = apply(_dai.new_SmallSetVar, args)
        try: self.this.append(this)
        except: self.this = this
    def __div__(*args): return apply(_dai.SmallSetVar___div__, args)
    def __or__(*args): return apply(_dai.SmallSetVar___or__, args)
    def __and__(*args): return apply(_dai.SmallSetVar___and__, args)
    def __idiv__(*args): return apply(_dai.SmallSetVar___idiv__, args)
    def __ior__(*args): return apply(_dai.SmallSetVar___ior__, args)
    def __iand__(*args): return apply(_dai.SmallSetVar___iand__, args)
    def __lshift__(*args): return apply(_dai.SmallSetVar___lshift__, args)
    def __rshift__(*args): return apply(_dai.SmallSetVar___rshift__, args)
    def intersects(*args): return apply(_dai.SmallSetVar_intersects, args)
    def contains(*args): return apply(_dai.SmallSetVar_contains, args)
    def size(*args): return apply(_dai.SmallSetVar_size, args)
    def empty(*args): return apply(_dai.SmallSetVar_empty, args)
    def elements(*args): return apply(_dai.SmallSetVar_elements, args)
    def begin(*args): return apply(_dai.SmallSetVar_begin, args)
    def end(*args): return apply(_dai.SmallSetVar_end, args)
    def rbegin(*args): return apply(_dai.SmallSetVar_rbegin, args)
    def rend(*args): return apply(_dai.SmallSetVar_rend, args)
    def front(*args): return apply(_dai.SmallSetVar_front, args)
    __swig_destroy__ = _dai.delete_SmallSetVar
    __del__ = lambda self : None;
SmallSetVar_swigregister = _dai.SmallSetVar_swigregister
SmallSetVar_swigregister(SmallSetVar)

calcLinearState = _dai.calcLinearState
calcState = _dai.calcState
class VarSet(SmallSetVar):
    __swig_setmethods__ = {}
    for _s in [SmallSetVar]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, VarSet, name, value)
    __swig_getmethods__ = {}
    for _s in [SmallSetVar]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, VarSet, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = apply(_dai.new_VarSet, args)
        try: self.this.append(this)
        except: self.this = this
    def nrStates(*args): return apply(_dai.VarSet_nrStates, args)
    def append(*args): return apply(_dai.VarSet_append, args)
    __swig_destroy__ = _dai.delete_VarSet
    __del__ = lambda self : None;
VarSet_swigregister = _dai.VarSet_swigregister
VarSet_swigregister(VarSet)

class Prob:
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Prob, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Prob, name)
    __repr__ = _swig_repr
    NORMPROB = _dai.Prob_NORMPROB
    NORMLINF = _dai.Prob_NORMLINF
    DISTL1 = _dai.Prob_DISTL1
    DISTLINF = _dai.Prob_DISTLINF
    DISTTV = _dai.Prob_DISTTV
    DISTKL = _dai.Prob_DISTKL
    DISTHEL = _dai.Prob_DISTHEL
    def __init__(self, *args): 
        this = apply(_dai.new_Prob, args)
        try: self.this.append(this)
        except: self.this = this
    def begin(*args): return apply(_dai.Prob_begin, args)
    def end(*args): return apply(_dai.Prob_end, args)
    def rbegin(*args): return apply(_dai.Prob_rbegin, args)
    def rend(*args): return apply(_dai.Prob_rend, args)
    def p(*args): return apply(_dai.Prob_p, args)
    def size(*args): return apply(_dai.Prob_size, args)
    def entropy(*args): return apply(_dai.Prob_entropy, args)
    def max(*args): return apply(_dai.Prob_max, args)
    def min(*args): return apply(_dai.Prob_min, args)
    def sum(*args): return apply(_dai.Prob_sum, args)
    def sumAbs(*args): return apply(_dai.Prob_sumAbs, args)
    def maxAbs(*args): return apply(_dai.Prob_maxAbs, args)
    def hasNaNs(*args): return apply(_dai.Prob_hasNaNs, args)
    def hasNegatives(*args): return apply(_dai.Prob_hasNegatives, args)
    def argmax(*args): return apply(_dai.Prob_argmax, args)
    def draw(*args): return apply(_dai.Prob_draw, args)
    def __le__(*args): return apply(_dai.Prob___le__, args)
    def __neg__(*args): return apply(_dai.Prob___neg__, args)
    def abs(*args): return apply(_dai.Prob_abs, args)
    def exp(*args): return apply(_dai.Prob_exp, args)
    def log(*args): return apply(_dai.Prob_log, args)
    def inverse(*args): return apply(_dai.Prob_inverse, args)
    def normalized(*args): return apply(_dai.Prob_normalized, args)
    def randomize(*args): return apply(_dai.Prob_randomize, args)
    def setUniform(*args): return apply(_dai.Prob_setUniform, args)
    def takeAbs(*args): return apply(_dai.Prob_takeAbs, args)
    def takeExp(*args): return apply(_dai.Prob_takeExp, args)
    def takeLog(*args): return apply(_dai.Prob_takeLog, args)
    def normalize(*args): return apply(_dai.Prob_normalize, args)
    def fill(*args): return apply(_dai.Prob_fill, args)
    def __iadd__(*args): return apply(_dai.Prob___iadd__, args)
    def __isub__(*args): return apply(_dai.Prob___isub__, args)
    def __imul__(*args): return apply(_dai.Prob___imul__, args)
    def __idiv__(*args): return apply(_dai.Prob___idiv__, args)
    def divide(*args): return apply(_dai.Prob_divide, args)
    def __ixor__(*args): return apply(_dai.Prob___ixor__, args)
    def __add__(*args): return apply(_dai.Prob___add__, args)
    def __sub__(*args): return apply(_dai.Prob___sub__, args)
    def __mul__(*args): return apply(_dai.Prob___mul__, args)
    def __div__(*args): return apply(_dai.Prob___div__, args)
    def divided_by(*args): return apply(_dai.Prob_divided_by, args)
    def __xor__(*args): return apply(_dai.Prob___xor__, args)
    def __getitem__(*args): return apply(_dai.Prob___getitem__, args)
    def __setitem__(*args): return apply(_dai.Prob___setitem__, args)
    def __paren(*args): return apply(_dai.Prob___paren, args)
    def __paren_asgn(*args): return apply(_dai.Prob___paren_asgn, args)
    __swig_destroy__ = _dai.delete_Prob
    __del__ = lambda self : None;
Prob_swigregister = _dai.Prob_swigregister
Prob_swigregister(Prob)

createFactorExpGauss = _dai.createFactorExpGauss
createFactorPotts = _dai.createFactorPotts
createFactorDelta = _dai.createFactorDelta
class Factor:
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Factor, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Factor, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = apply(_dai.new_Factor, args)
        try: self.this.append(this)
        except: self.this = this
    def p(*args): return apply(_dai.Factor_p, args)
    def vars(*args): return apply(_dai.Factor_vars, args)
    def states(*args): return apply(_dai.Factor_states, args)
    def entropy(*args): return apply(_dai.Factor_entropy, args)
    def max(*args): return apply(_dai.Factor_max, args)
    def min(*args): return apply(_dai.Factor_min, args)
    def sum(*args): return apply(_dai.Factor_sum, args)
    def maxAbs(*args): return apply(_dai.Factor_maxAbs, args)
    def hasNaNs(*args): return apply(_dai.Factor_hasNaNs, args)
    def hasNegatives(*args): return apply(_dai.Factor_hasNegatives, args)
    def strength(*args): return apply(_dai.Factor_strength, args)
    def abs(*args): return apply(_dai.Factor_abs, args)
    def exp(*args): return apply(_dai.Factor_exp, args)
    def log(*args): return apply(_dai.Factor_log, args)
    def inverse(*args): return apply(_dai.Factor_inverse, args)
    def normalized(*args): return apply(_dai.Factor_normalized, args)
    def randomize(*args): return apply(_dai.Factor_randomize, args)
    def setUniform(*args): return apply(_dai.Factor_setUniform, args)
    def normalize(*args): return apply(_dai.Factor_normalize, args)
    def fill(*args): return apply(_dai.Factor_fill, args)
    def __ixor__(*args): return apply(_dai.Factor___ixor__, args)
    def __xor__(*args): return apply(_dai.Factor___xor__, args)
    def __iadd__(*args): return apply(_dai.Factor___iadd__, args)
    def __isub__(*args): return apply(_dai.Factor___isub__, args)
    def __imul__(*args): return apply(_dai.Factor___imul__, args)
    def __idiv__(*args): return apply(_dai.Factor___idiv__, args)
    def __add__(*args): return apply(_dai.Factor___add__, args)
    def __sub__(*args): return apply(_dai.Factor___sub__, args)
    def __mul__(*args): return apply(_dai.Factor___mul__, args)
    def __div__(*args): return apply(_dai.Factor___div__, args)
    def slice(*args): return apply(_dai.Factor_slice, args)
    def embed(*args): return apply(_dai.Factor_embed, args)
    def marginal(*args): return apply(_dai.Factor_marginal, args)
    def maxMarginal(*args): return apply(_dai.Factor_maxMarginal, args)
    def __getitem__(*args): return apply(_dai.Factor___getitem__, args)
    def __setitem__(*args): return apply(_dai.Factor___setitem__, args)
    def __paren__(*args): return apply(_dai.Factor___paren__, args)
    def __paren_asgn__(*args): return apply(_dai.Factor___paren_asgn__, args)
    __swig_destroy__ = _dai.delete_Factor
    __del__ = lambda self : None;
Factor_swigregister = _dai.Factor_swigregister
Factor_swigregister(Factor)
createFactorIsing = _dai.createFactorIsing

class BipartiteGraph:
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, BipartiteGraph, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, BipartiteGraph, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = apply(_dai.new_BipartiteGraph, args)
        try: self.this.append(this)
        except: self.this = this
    def nb1(*args): return apply(_dai.BipartiteGraph_nb1, args)
    def nb2(*args): return apply(_dai.BipartiteGraph_nb2, args)
    def addNode1(*args): return apply(_dai.BipartiteGraph_addNode1, args)
    def addNode2(*args): return apply(_dai.BipartiteGraph_addNode2, args)
    def add1(*args): return apply(_dai.BipartiteGraph_add1, args)
    def add2(*args): return apply(_dai.BipartiteGraph_add2, args)
    def addEdge(*args): return apply(_dai.BipartiteGraph_addEdge, args)
    def eraseNode1(*args): return apply(_dai.BipartiteGraph_eraseNode1, args)
    def eraseNode2(*args): return apply(_dai.BipartiteGraph_eraseNode2, args)
    def erase1(*args): return apply(_dai.BipartiteGraph_erase1, args)
    def erase2(*args): return apply(_dai.BipartiteGraph_erase2, args)
    def eraseEdge(*args): return apply(_dai.BipartiteGraph_eraseEdge, args)
    def nrNodes1(*args): return apply(_dai.BipartiteGraph_nrNodes1, args)
    def nrNodes2(*args): return apply(_dai.BipartiteGraph_nrNodes2, args)
    def nr1(*args): return apply(_dai.BipartiteGraph_nr1, args)
    def nr2(*args): return apply(_dai.BipartiteGraph_nr2, args)
    def nrEdges(*args): return apply(_dai.BipartiteGraph_nrEdges, args)
    def delta1(*args): return apply(_dai.BipartiteGraph_delta1, args)
    def delta2(*args): return apply(_dai.BipartiteGraph_delta2, args)
    def isConnected(*args): return apply(_dai.BipartiteGraph_isConnected, args)
    def isTree(*args): return apply(_dai.BipartiteGraph_isTree, args)
    def checkConsistency(*args): return apply(_dai.BipartiteGraph_checkConsistency, args)
    def printDot(*args): return apply(_dai.BipartiteGraph_printDot, args)
    __swig_destroy__ = _dai.delete_BipartiteGraph
    __del__ = lambda self : None;
BipartiteGraph_swigregister = _dai.BipartiteGraph_swigregister
BipartiteGraph_swigregister(BipartiteGraph)

class FactorGraph:
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, FactorGraph, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, FactorGraph, name)
    __repr__ = _swig_repr
    __swig_setmethods__["G"] = _dai.FactorGraph_G_set
    __swig_getmethods__["G"] = _dai.FactorGraph_G_get
    def __init__(self, *args): 
        this = apply(_dai.new_FactorGraph, args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _dai.delete_FactorGraph
    __del__ = lambda self : None;
    def clone(*args): return apply(_dai.FactorGraph_clone, args)
    def var(*args): return apply(_dai.FactorGraph_var, args)
    def vars(*args): return apply(_dai.FactorGraph_vars, args)
    def factor(*args): return apply(_dai.FactorGraph_factor, args)
    def factors(*args): return apply(_dai.FactorGraph_factors, args)
    def nbV(*args): return apply(_dai.FactorGraph_nbV, args)
    def nbF(*args): return apply(_dai.FactorGraph_nbF, args)
    def begin(*args): return apply(_dai.FactorGraph_begin, args)
    def end(*args): return apply(_dai.FactorGraph_end, args)
    def nrVars(*args): return apply(_dai.FactorGraph_nrVars, args)
    def nrFactors(*args): return apply(_dai.FactorGraph_nrFactors, args)
    def nrEdges(*args): return apply(_dai.FactorGraph_nrEdges, args)
    def findVar(*args): return apply(_dai.FactorGraph_findVar, args)
    def findVars(*args): return apply(_dai.FactorGraph_findVars, args)
    def findFactor(*args): return apply(_dai.FactorGraph_findFactor, args)
    def Delta(*args): return apply(_dai.FactorGraph_Delta, args)
    def delta(*args): return apply(_dai.FactorGraph_delta, args)
    def isConnected(*args): return apply(_dai.FactorGraph_isConnected, args)
    def isTree(*args): return apply(_dai.FactorGraph_isTree, args)
    def isPairwise(*args): return apply(_dai.FactorGraph_isPairwise, args)
    def isBinary(*args): return apply(_dai.FactorGraph_isBinary, args)
    def Cliques(*args): return apply(_dai.FactorGraph_Cliques, args)
    def setFactor(*args): return apply(_dai.FactorGraph_setFactor, args)
    def setFactors(*args): return apply(_dai.FactorGraph_setFactors, args)
    def backupFactor(*args): return apply(_dai.FactorGraph_backupFactor, args)
    def restoreFactor(*args): return apply(_dai.FactorGraph_restoreFactor, args)
    def backupFactors(*args): return apply(_dai.FactorGraph_backupFactors, args)
    def restoreFactors(*args): return apply(_dai.FactorGraph_restoreFactors, args)
    def maximalFactors(*args): return apply(_dai.FactorGraph_maximalFactors, args)
    def clamped(*args): return apply(_dai.FactorGraph_clamped, args)
    def clamp(*args): return apply(_dai.FactorGraph_clamp, args)
    def clampVar(*args): return apply(_dai.FactorGraph_clampVar, args)
    def clampFactor(*args): return apply(_dai.FactorGraph_clampFactor, args)
    def makeCavity(*args): return apply(_dai.FactorGraph_makeCavity, args)
    def ReadFromFile(*args): return apply(_dai.FactorGraph_ReadFromFile, args)
    def WriteToFile(*args): return apply(_dai.FactorGraph_WriteToFile, args)
    def printDot(*args): return apply(_dai.FactorGraph_printDot, args)
FactorGraph_swigregister = _dai.FactorGraph_swigregister
FactorGraph_swigregister(FactorGraph)

class PySwigIterator:
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PySwigIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PySwigIterator, name)
    def __init__(self, *args, **kwargs): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    __swig_destroy__ = _dai.delete_PySwigIterator
    __del__ = lambda self : None;
    def value(*args): return apply(_dai.PySwigIterator_value, args)
    def incr(*args): return apply(_dai.PySwigIterator_incr, args)
    def decr(*args): return apply(_dai.PySwigIterator_decr, args)
    def distance(*args): return apply(_dai.PySwigIterator_distance, args)
    def equal(*args): return apply(_dai.PySwigIterator_equal, args)
    def copy(*args): return apply(_dai.PySwigIterator_copy, args)
    def next(*args): return apply(_dai.PySwigIterator_next, args)
    def previous(*args): return apply(_dai.PySwigIterator_previous, args)
    def advance(*args): return apply(_dai.PySwigIterator_advance, args)
    def __eq__(*args): return apply(_dai.PySwigIterator___eq__, args)
    def __ne__(*args): return apply(_dai.PySwigIterator___ne__, args)
    def __iadd__(*args): return apply(_dai.PySwigIterator___iadd__, args)
    def __isub__(*args): return apply(_dai.PySwigIterator___isub__, args)
    def __add__(*args): return apply(_dai.PySwigIterator___add__, args)
    def __sub__(*args): return apply(_dai.PySwigIterator___sub__, args)
    def __iter__(self): return self
PySwigIterator_swigregister = _dai.PySwigIterator_swigregister
PySwigIterator_swigregister(PySwigIterator)

class VecFactor:
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VecFactor, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VecFactor, name)
    __repr__ = _swig_repr
    def iterator(*args): return apply(_dai.VecFactor_iterator, args)
    def __iter__(self): return self.iterator()
    def __nonzero__(*args): return apply(_dai.VecFactor___nonzero__, args)
    def __len__(*args): return apply(_dai.VecFactor___len__, args)
    def pop(*args): return apply(_dai.VecFactor_pop, args)
    def __getslice__(*args): return apply(_dai.VecFactor___getslice__, args)
    def __setslice__(*args): return apply(_dai.VecFactor___setslice__, args)
    def __delslice__(*args): return apply(_dai.VecFactor___delslice__, args)
    def __delitem__(*args): return apply(_dai.VecFactor___delitem__, args)
    def __getitem__(*args): return apply(_dai.VecFactor___getitem__, args)
    def __setitem__(*args): return apply(_dai.VecFactor___setitem__, args)
    def append(*args): return apply(_dai.VecFactor_append, args)
    def empty(*args): return apply(_dai.VecFactor_empty, args)
    def size(*args): return apply(_dai.VecFactor_size, args)
    def clear(*args): return apply(_dai.VecFactor_clear, args)
    def swap(*args): return apply(_dai.VecFactor_swap, args)
    def get_allocator(*args): return apply(_dai.VecFactor_get_allocator, args)
    def begin(*args): return apply(_dai.VecFactor_begin, args)
    def end(*args): return apply(_dai.VecFactor_end, args)
    def rbegin(*args): return apply(_dai.VecFactor_rbegin, args)
    def rend(*args): return apply(_dai.VecFactor_rend, args)
    def pop_back(*args): return apply(_dai.VecFactor_pop_back, args)
    def erase(*args): return apply(_dai.VecFactor_erase, args)
    def __init__(self, *args): 
        this = apply(_dai.new_VecFactor, args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(*args): return apply(_dai.VecFactor_push_back, args)
    def front(*args): return apply(_dai.VecFactor_front, args)
    def back(*args): return apply(_dai.VecFactor_back, args)
    def assign(*args): return apply(_dai.VecFactor_assign, args)
    def resize(*args): return apply(_dai.VecFactor_resize, args)
    def insert(*args): return apply(_dai.VecFactor_insert, args)
    def reserve(*args): return apply(_dai.VecFactor_reserve, args)
    def capacity(*args): return apply(_dai.VecFactor_capacity, args)
    __swig_destroy__ = _dai.delete_VecFactor
    __del__ = lambda self : None;
VecFactor_swigregister = _dai.VecFactor_swigregister
VecFactor_swigregister(VecFactor)

class VecVecFactor:
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VecVecFactor, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VecVecFactor, name)
    __repr__ = _swig_repr
    def iterator(*args): return apply(_dai.VecVecFactor_iterator, args)
    def __iter__(self): return self.iterator()
    def __nonzero__(*args): return apply(_dai.VecVecFactor___nonzero__, args)
    def __len__(*args): return apply(_dai.VecVecFactor___len__, args)
    def pop(*args): return apply(_dai.VecVecFactor_pop, args)
    def __getslice__(*args): return apply(_dai.VecVecFactor___getslice__, args)
    def __setslice__(*args): return apply(_dai.VecVecFactor___setslice__, args)
    def __delslice__(*args): return apply(_dai.VecVecFactor___delslice__, args)
    def __delitem__(*args): return apply(_dai.VecVecFactor___delitem__, args)
    def __getitem__(*args): return apply(_dai.VecVecFactor___getitem__, args)
    def __setitem__(*args): return apply(_dai.VecVecFactor___setitem__, args)
    def append(*args): return apply(_dai.VecVecFactor_append, args)
    def empty(*args): return apply(_dai.VecVecFactor_empty, args)
    def size(*args): return apply(_dai.VecVecFactor_size, args)
    def clear(*args): return apply(_dai.VecVecFactor_clear, args)
    def swap(*args): return apply(_dai.VecVecFactor_swap, args)
    def get_allocator(*args): return apply(_dai.VecVecFactor_get_allocator, args)
    def begin(*args): return apply(_dai.VecVecFactor_begin, args)
    def end(*args): return apply(_dai.VecVecFactor_end, args)
    def rbegin(*args): return apply(_dai.VecVecFactor_rbegin, args)
    def rend(*args): return apply(_dai.VecVecFactor_rend, args)
    def pop_back(*args): return apply(_dai.VecVecFactor_pop_back, args)
    def erase(*args): return apply(_dai.VecVecFactor_erase, args)
    def __init__(self, *args): 
        this = apply(_dai.new_VecVecFactor, args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(*args): return apply(_dai.VecVecFactor_push_back, args)
    def front(*args): return apply(_dai.VecVecFactor_front, args)
    def back(*args): return apply(_dai.VecVecFactor_back, args)
    def assign(*args): return apply(_dai.VecVecFactor_assign, args)
    def resize(*args): return apply(_dai.VecVecFactor_resize, args)
    def insert(*args): return apply(_dai.VecVecFactor_insert, args)
    def reserve(*args): return apply(_dai.VecVecFactor_reserve, args)
    def capacity(*args): return apply(_dai.VecVecFactor_capacity, args)
    __swig_destroy__ = _dai.delete_VecVecFactor
    __del__ = lambda self : None;
VecVecFactor_swigregister = _dai.VecVecFactor_swigregister
VecVecFactor_swigregister(VecVecFactor)

class IndexFor:
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IndexFor, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IndexFor, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = apply(_dai.new_IndexFor, args)
        try: self.this.append(this)
        except: self.this = this
    def reset(*args): return apply(_dai.IndexFor_reset, args)
    def valid(*args): return apply(_dai.IndexFor_valid, args)
    __swig_destroy__ = _dai.delete_IndexFor
    __del__ = lambda self : None;
IndexFor_swigregister = _dai.IndexFor_swigregister
IndexFor_swigregister(IndexFor)

class Permute:
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Permute, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Permute, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = apply(_dai.new_Permute, args)
        try: self.this.append(this)
        except: self.this = this
    def convertLinearIndex(*args): return apply(_dai.Permute_convertLinearIndex, args)
    def sigma(*args): return apply(_dai.Permute_sigma, args)
    __swig_destroy__ = _dai.delete_Permute
    __del__ = lambda self : None;
Permute_swigregister = _dai.Permute_swigregister
Permute_swigregister(Permute)

class multifor:
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, multifor, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, multifor, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = apply(_dai.new_multifor, args)
        try: self.this.append(this)
        except: self.this = this
    def valid(*args): return apply(_dai.multifor_valid, args)
    def __getitem__(*args): return apply(_dai.multifor___getitem__, args)
    def next(*args): return apply(_dai.multifor_next, args)
    __swig_destroy__ = _dai.delete_multifor
    __del__ = lambda self : None;
multifor_swigregister = _dai.multifor_swigregister
multifor_swigregister(multifor)

class State:
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, State, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, State, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = apply(_dai.new_State, args)
        try: self.this.append(this)
        except: self.this = this
    def begin(*args): return apply(_dai.State_begin, args)
    def end(*args): return apply(_dai.State_end, args)
    def get(*args): return apply(_dai.State_get, args)
    def __call__(*args): return apply(_dai.State___call__, args)
    def valid(*args): return apply(_dai.State_valid, args)
    def reset(*args): return apply(_dai.State_reset, args)
    __swig_destroy__ = _dai.delete_State
    __del__ = lambda self : None;
State_swigregister = _dai.State_swigregister
State_swigregister(State)



